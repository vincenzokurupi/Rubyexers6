#CHAPTER 6 	Classes, Objects, and modules
 	
	
def perimeter_of_square(side_length)
	side_lengh * 4
end 

def area_of_squares(side_length)
	side_length * side_length
end 

def perimeter_of_triangle(side1, side2, side3)
	side1 + side2 + side3
end 

def area_of_triangle(base_width, hieght)
	base_width * height / 2
end

# Solution to the problem 

class Square < Shape 
	def initialize(side_length)
		@side_length = side_length
	end

	def area 
		@side_length * @side_length
	end 

	def perimeter
		@side_length * 4
	end
end 

class Triangle < Shape 
	def initialize(base_width, height, side1, side2, side3)
		@base_width = base_width
		@height = height 
		@side1 = side1
		@side2 = side2
		@side3 = side3
	end 

	def area 
		@base_width * @height / 2
	end 

	def perimeter 
		@side1 + @side2 + @side3
	end 
end 

#  Trying out 

puts area_of_triangle(6,6)
puts perimeter_of_square(5)

my_square = Square.new(5)
my_triangle = Triangle.new(6, 6, 7.81, 7.81, 7.81)
puts my_square.area
puts my_square.perimeter
puts my_triangle.area
puts my_triangle.perimeter

=begin

A class is a blue print for onjects. You have only one class callead Shape, but with it you can 
create multiple instances of shapes(shapes objects), all of have the methods and attributes
butes defined by the Shape class.

An object is an instance of a class. It Shape is the class, then x = Shape.new create a new 
Shape instance and make x reference that object. You would then say x is a Shape object, or an 
object of class Shape.	

=end

# Local, Global, Object, and Class Variables

class Square 
	def initialize(side_length)
		@side_length = side_length
	end 

	def area 
		@side_length * @side_length
	end 
end 

a = Square.new(10)
b = Square.new(5)
puts a.area
puts b.area

# Local variables examples it can only be used  
# only in the same place it is defined.
# 1st ex won't work 

def base_method 
	puts x
end 

x = 10 
basic_method 

# 2nd ex works 

def basic_method
	x = 50 
	puts x	
end

x = 10 
basic_method
puts x

# Global Variables 
# Glabal variables are availables from anywhere within an application, including inside classes or objects.
# $x is defined as glabal variables
# The $ and @ characters that denotes global variables and objects 

class Square 
	def initialize(side_length)
		@side_length = side_length
	end 

	def area 
		@side_length * @ side_length
	end
end

a = Square.new(100)
b = Square.new(25)
puts a.area
puts b.area

# Class Variables 
# The scope of a class variables is within the current class, as opposed to within specific objects of that class. 
# Class variables start with @@ 

class Square  
	def initialize(@@number_of_squares)
		@@number_of_squares += 1
	else 
		@@number_of_squares = 1
	end 
end

	def self.count 
		@@number_of_squares
	end 
end 

a = Square.new 
b = Square.new
puts Square.count 

# Class Method vs. Object Method 

class Square 
	def initialize(side_length)
		@side_length = side_length
	end 

	def area 
		@side_length * @side_length
	end 
end 

# access the @number_of_squares class variables

class Square 
	def self.test_method 
		puts "Hello from the Squarre Class"
	end 

	def test_method 
		puts "Hello from an instance of class Square!"
	end 
end 
# self. represents the current class, so def self.test_method defines 
# the method as being specific to the class.

Square.test_method
Square.new.test_method

# you could define the method like so:

class Square 
	def Square.test_method
		puts "Hello from the Square class!"
	end 
end 

=begin
	
	The style you use (ClassName.method_name versus self.method_name)come down to 
	personal preference. Using self.method_name (as in self.test_method) doesn't require you to 
	restate the class name over and over, but ClassName.method_name (as in Square.test_method) is 
	a closer match to what you'll be using to call that method later on.

=end

class Square
	if defined?(@@number_of_squares)
		@@number_of_squares += 1
	else
		@@number_of_squares = 1
	end 
end 

	def Square.count
		@@number_of_squares
	end 
end 

a = Square.new 
puts Square.count 
b = Square.new
puts Square.count 
c = Square.new 
puts Square.count 


# Inheritance

class ParentClass 
	def method1
		puts "Hello from method1 in the parent class"
	end 

	def method2
		puts "Hello from method2 in ths parent class"
	end 
end 

class ChildClass < ParentClass
	def method2
		puts "Hello from method2 in th child class"
	end
end

my object = ChildClass.new 
my_object.method1

my_object.method2

# Condider some basic classes that represent different types of people:

class Person 
	def initialize(name)
		@name = name 
	end 

	def name 
		return @name 
	end
end 

class Doctor < person
	def name 
		"Dr." + super
	end 
end 

# Overriding Existing Methods 

x = "This is a test"
puts x.class

puts x.length 
puts x.upcase

class String 
	def length 
		20
	end 
end

puts  "This is a test ".length
puts "a".length 
puts "A really long line of text".length 

# example to treat with caution your application

# 1st
class Dog 
	def walk
		puts "Woof"
	end 
end 

my_dog = Dog.new
my_dog.talk

# 2nd
class Dog 
	def talk 
		puts "Howl!"
	end 
end 

my_dog.talk

# Reflection and Discorvering an Object's Methods

class Person 
	attr_accessor :name, :age 
end 

p = Person.new 
p.name = "Fred"
p.age
puts p.intance_variables

# 

class Person 
	def initialize(name)
		set_name(name)
	end 

	def name 
		@first_name + '' + @last_name 
	end 

	def set_name(name)
		first_name, last_name = name.split(/\s+/)
		set_first_name(first_name)
		set_last_name(last_name)
	end 

	def set_first_name(name)
		@first_name = name
	end

	def set_first_name(name)
		@last_name = name 
	end
end 

# 

p = Person.new("Fred Bloggs")
p.set_last_name("Smith")
puts p.name 

#

p = Person.new("Fred Bloggs")
p.set_last_name("Smith")
puts p.name

#

class Person 
	def initialize(name)
		set_name(name)
	end 

	def name
		@first_name + '' + @last_name 
	end 

	private

	def set_name(name)
		first_name, last_name = name.split(/\s+/)
		set_first_name(first_name)
		set_name = name
	end 

	def set_first_name(name)
		@first_name = name 
	end 

	def set_last_name(name)
		@last_name = name
	end 
end 
# this won't work 
p = Person.new("Fred Bloggs")
p.set_last_name("Smith")
# Private tells ruby that any methods declared in this class from
# there on should be kept private. This means that only code within the object's
# methods can access those private methods, code outside of the class can't. 

class Person 
	def anyone_can_access_this 
		...
	end 

	private
	def this_is_private
		...
	end 

	public 
	def another_public_method
		...
	end 
end 

# Public is the opposite of private 
# You could put private before one method 
# but then revert back to public methods again 
# afterwards using public.

class Person 
	def anyone_can_access_this; ...; end 

	def this_is_private;...; end

	def this_is_also_private;...; end 

	def another_public_method;...; end

	private :this_is_private, :this_is_also_private
end

# Ruby supports a third kind form of emcapsulation (other than public and private) called 
# protected that makes a method private but within a
# single object. For example, you were unable to directly call a private method outside the scope 
# of that object and its methods.
  
 class Person 
 	def initialize(age)
 		@age = age
 	end 

 	def age 
 		@age
 	end 

 	def age_difference_with(other_person)
 		(self.age - other_person.age).abs 
 	end 

 	protected :age
 end 

 fred = Person.new(34)
 chris = Person.new(25)
 puts chris.age

# Polymorphism 
# Is the concept of writing code that can work with objects of multiple types and classes at once
# For example, the + method works for adding numbers, joining string, and adding arrys together.
# What + does depends entirely on what type of things you're adding together.

class Animal 
	attr_accessor :name

	def initialize(name)
		@name = name
	end 
end

class Cat < Animal
	def talk
		"Meaow!"
	end 
end 

class Dog < Animal
	def talk 
		"Woof!"
	end 
end 

animals = [Cat.new("Flossie"), Dog.new("Clive"), Cat.new("Max")]
animals.each do |animal|
	puts animal.talk
end 

#

puts 100.to_s 
puts [1, 2, 3].to_s
puts ({ :name => 'Fred', :age => 10 }).to_s

# Nested Classes 
# to defined classes within other classes. These are called nested classes.

 class Drawing 
 	class Line 
 	end 

 	class Circle 
 	end 
 end 

# From within Drawing, you can access the Line and Circle classes directly, but from outside 
# the drawing class, you can access Line and Circle and Drawing
# ::Line and ::Drawing ::Circle

class Drawing
def Drawing.give_me_a_circle
	Circle.new
end

class Line
end

class Circle 
	def what_am_i
	"This is a circle"
	end 
end 
end 

a = Drawing.give_me_a_circle
puts a.what_am_i
a = Drawing::Circle.new 
puts a.what_am_i
a = Circle.new
puts a.what_am_i

# The Scope of Constants 

def circumference_of_circle(radius)
	2 * Pi * radius
end 

Pi = 3.141592
puts circumference_of_circle(10)

# 

Pi 3.141592

class OtherPlanet
	Pi 4.5

	def Otherplanet.circumference_of_circle(radius)
		radius * 2 * Pi
	end 
end  

	puts OtherPlanet.circumference_of_circle(10)

	puts OtherPlanet::Pi 

	# 

	puts Pi

# modules, names and Mix-ins 

def random 
	ram(1000000)
end 

puts random

#  

def random
	rand(26) +  65).chr
end 
 
# using modules to seperate the two conflicting names

module NumberStuff 
	def Number NumberStuff
		rand(1000000)
	end 

	module LetterStuff 
		def LetterStuff
			(rand(26) + 65).chr
		end 
	end 

puts NumberStuff.random
puts LetterStuff.random

# using modules and classes.

module TooBox 
	class Ruler
		attr_accessor :length
	end 
end 

module Country 
	class Ruler 
		attr_accessor :name 
	end 
end 

a = ToolBox::Ruler.new 
a.length =  50
b = Country::Ruler.new
b.name = "Ghengis Khan from Moskau"

module UsefulFeatures
	def class_name 
		self.class.to_s
	end
end 

class Person 
	include UsefulFeatures
end 

x = Person.new
puts x.class_name

# 

module AnotherModule 
	def do_stuff 
		puts "This is a test" 
	end
end 

include AnotherModule 
do_stuff

#

[1,2,3,4,5].each { |number| puts number }

# 

my_array = %w{this is a test of the longest word check}
longest_word = ''
my_array.each do |word|
	longest_word = word if longest_word.length < word.length
end 
puts longest_word

#

my_array = %w{10 56 92 3 49 588 18}
highest_number = 0 
my_array.each do |number|
	number = number.to_i 
	highest_number = number if number > highest_number
end 
puts highest_number

#

my_arry = %w{10 56 92 3 588 18}
highest_number = 0 
my_array.each do |number|
	number = number.to |number|
	highest_number = number if number > highest_number
end 
puts highest_number

# some examples of the methods provided by enumerables 

[1,2,3,4].collect { |i| i.to_s + "x" }

#

[1,2,3,4].detect { |i| i.between?(2,3) }

#

[2,3]

#

[4,1,3,2].sort 

#

[1,2,3,4].max 

#

[1,2,3,4].min

#

class AllVowels
	@@vowels = %w{a e i o u}
	def each 
		@@vowels.each { |v| yield v }
	end 
end 
#
x = Allowels.new
x.each { |v| puts v }

#

class Allwovels 
	include Enumerables 
	def each 
		@@vowels.each { |v| yield v }
	end 
end 

# 

x = AllVollels.new

x.collect { |i| i + "x" }

x.detect { |i| i > "j" }

x.select { |i| i > "j" }

x.sort

x.max 

x.min 

#

class Song 
	include Comparable 

	attr_accessor :length 
	def <=>(other)
		@length <=> other_name
	end 
end

	def initialize(song_name, length)
		@song_name = song_name
		@length = length 
	end 

end

a = Song.new('Rock around the clock', 143)
b = Song.new('Bohemian Rhapsody', 544)
c = Song.new('Minute Waltz', 60)

a < b 

b >= c

c < a 

a.between?(c,b)

#

module ToolBox
	class Ruler 
		attr_accessor :length
	end 
end

module Country 
	class Ruler
		attr_accessor :name 
	end
end 

a = ToolBox::Ruler.new 
a.length = 50 
b = Country::Ruler.new 
b.name = "Ghengis Khan of Moskau"

#

include Country 
c = Ruler.new 
c.name "King Henry VIII"

# Creating  the Initial Classes 

class Dungeon 
	attr_accessor :player 

	def initialize(player_name)
		@player = Player.new(player_name)
		@rooms = []
	end 

	class Player 
		attr_accessor :name, :location 
		@name = player_name
	end 

	class Room 
		attr_accessor :reference, :name, :description, :connections

		def initialize(reference, name, description, connections)
			@reference = reference
			@name = name
			@description = description
			@connections = connections
		end 
	end
end 

# 
my_dungeon = Dungeon.new("Fred Bloggs")
puts my_dungeon.player.name 

# Structs: Quick and Easy Data Classes

Person = Struct.new(:name, :gender, :age)
fred = Person.new("Fred", "male", 50)
chris = Person.new("Chris", "male", 25)
puts fred.age + chris.age

#

class person 
	attr_accessor :name, :gender, :age

	def initialize(name, gender, age)
		@name = name 
		@gender = gender
		@age = age 
	end 
end

#

class Dungeon 
	attr_accessor :player

	def initialize(player_name)
		@player = Player.new(:name, :location)
		@rooms = []
	end 

	Player = Struct.new(:name, :location)
	Room = Struct.new(:reference, :name, :description, :connections)
end 

=begin 
	ATTR_ACCESSSOR 

	Reminder of what attr_accessor lets you do.
=end 

class Person 
	attr_accessor :name, :age
end 

x = Person.new 
x.name = "Fred"
x.age = 10
puts x.name, x.age

# This code is equivalent to the single attr_accessor :name, :age in the line the preceding Person class.

class Person 
	def name 
		@name 
	end 

	def name=(name)
		@name = name 
	end 

	def age
		@age
	end 

	def age=(age)
		@age = age
	end 
end

#  

class Dungeon 
	def add_room(reference, name, description, connections)
		@rooms << Room.new(reference, name, description, connections)
	end 
end 

#

my_dungeon.add_room(:largecave, "Large Cave", "a large cave", { :west => :smallcave})

my_dungeon.add_room(:smallcave, "Small Cave", "a small, claustrophobic cave", { :east => :largecave })

# Make the Dungeon Work

class Dungeon
	def start(location)
		@player.location = location 
		show_current_description 
	end

	def show_current_description 
		puts find_room_in_dungeon(@player.location).full_description
	end 

	def find_room_in_dungeon(reference)
		@rooms.detect { |room| room.reference == reference }
	end 

	class Room 
		def full_description 
			@name = "\n\nYou are in " + @description 
		end
	end 
end 

#

class Dungeon 
	attr_accessor :player

	def initialize(player_name)
		@player = Player.new(player_name)
		@rooms = []
	end

	def add_room(reference, name, description, connections)
		@rooms << Room.new(reference, name, description, connections)
	end 

	def start(location)
		@player.location = location
		show_current_description
	end 

	def show_current_description 
		puts find_room_in_dungeon(@player.location).full_description
	end 

	def find_room_in_dungeon(reference)
		@rooms.detect { |room| room.reference == reference }
	end

	def find_room_in_direction(direction)
		find_room_in_dungeon(@player.location).connections[direction]	
	end 

	def go(direction)
		puts "You go " + direction.to_s
		@player.location = find_room_in_direction(direction)
		show_current_description
	end 

	class Player 
		attr_accessor :name, :description, :connections

		def initialize(reference, name, description, connections)
			@reference = reference 
			@name = name 
			@description = description 
			@connections = connections 
		end 

		def full_descriptions 
			@name + "\n\nYou are in " + @descriptions 
		end 
	end 

	# Create the mains dungeon object 
	my_dungeon = Dungeon.new("Fred Bloggs")

	# Add rooms to the dungeon
	my_dungeon.add_room(:largecave, "Large Cave", "a large cavernous cave", { :west => :smallcave })
	my_dungeon.add_room(:smallcave, "Small Cave", "a small, claustrophobic cave", { :east => :largecave })

	# Start the dungeon by placing the player in the large cave 
	my_dungeon.start(:largecave)








			


